pipeline {
    agent {
        label 'docker'
    }
    environment {
        GCP_CREDENTIALS = credentials('SVC_JSON_DEV')
        ADMIN_EMAIL = 'getadqdevops@gmail.com'
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    def gitInfo = checkout([$class: 'GitSCM',
                        branches: [[name: "*/${BRANCH_NAME}"]],
                        userRemoteConfigs: [[url: 'https://github.com/bpurnachander/get-ubuntudesktop-iac.git']]
                    ])
                    def branchName = gitInfo.GIT_BRANCH.tokenize('/')[1]
                    echo "Branch name: ${branchName}"
                    
                    currentBuild.displayName = "ENV: ${ENV} - #${env.BUILD_NUMBER}"
                    currentBuild.description = """\
TERRAFORM: ${TERRAFORM}
TERRAFORM_EXTRA_ARGS: ${TERRAFORM_EXTRA_ARGS}
ANSIBLE: ${ANSIBLE}
ANSIBLE_EXTRA_ARGS: ${ANSIBLE_EXTRA_ARGS}
"""
                }
            }
        }
        stage('Initial Check') {
            steps {
                script {
                    if (terraform == 'skip' && ANSIBLE == 'skip') {
                        error('Both Terraform and Ansible stages are set to skip. Aborting the build.')
                    }
                }
            }
        }
        stage('Get credentials') {
            when {
                expression {
                    return terraform in ['skip', 'apply']
                }
            }
            steps {
                script {
                    def destPath = "${env.WORKSPACE}/service-account.json"
                    writeFile file: destPath, text: new String(readFile(env.GCP_CREDENTIALS).bytes)
                    sh """
                    sudo cp ${env.WORKSPACE}/adq-ubuntudesktop/ansible/ansible.cfg /etc/ansible/ansible.cfg
                    """
                }
            }
        }
        stage('terraform_plan') {
            when {
                expression {
                    return terraform in ['plan', 'apply']
                }
            }
            steps {
                dir("./adq-ubuntudesktop/terraform/environments/${ENV}") {
                    sh """
                    terraform init
                    terraform plan ${TERRAFORM_EXTRA_ARGS}
                    """
                }
            }
        }
        stage('Request Approval for Terraform Apply') {
            when {
                expression {
                    return terraform == 'apply'
                }
            }
            steps {
                script {
                    emailext (
                        subject: "Approval Needed: Terraform Apply",
                        body: """
                            <p>Please approve the execution of the Terraform Apply stage.</p>
                            <p>Click <a href="${env.BUILD_URL}">here</a> to view the build details and provide approval.</p>
                        """,
                        mimeType: 'text/html',
                        to: "${env.ADMIN_EMAIL}"
                    )
                    echo 'Approval email sent. Awaiting manual approval...'
                }
            }
        }
        stage('Check and Apply Terraform') {
            when {
                expression {
                    return terraform == 'apply'
                }
            }
            steps {
                script {
                    def userInput = input(
                        id: 'userInput', message: 'Approve Terraform Apply?', parameters: [
                            [$class: 'BooleanParameterDefinition', defaultValue: true, description: 'Approve to proceed?', name: 'Proceed']
                        ]
                    )
                    if (userInput) {
                        dir("./adq-ubuntudesktop/terraform/environments/${ENV}") {
                            def tfState = sh(script: "terraform state list", returnStdout: true).trim()
                            if (tfState) {
                                echo 'Existing Terraform state found.'
                                emailext (
                                    subject: "Approval Needed: Recreate Terraform Infrastructure",
                                    body: """
                                        <p>Existing resources found. Do you want to recreate the infrastructure?</p>
                                        <p>Click <a href="${env.BUILD_URL}">here</a> to view the build details and provide approval.</p>
                                    """,
                                    mimeType: 'text/html',
                                    to: "${env.ADMIN_EMAIL}"
                                )
                                def userInputRecreate = input(
                                    id: 'userInputRecreate', message: 'Existing resources found. Do you want to recreate the infrastructure?', parameters: [
                                        [$class: 'BooleanParameterDefinition', defaultValue: true, description: 'Approve to recreate?', name: 'Proceed']
                                    ]
                                )
                                if (userInputRecreate) {
                                    sh """
                                    terraform init
                                    terraform apply --auto-approve ${TERRAFORM_EXTRA_ARGS}
                                    """
                                } else {
                                    echo 'Aborted by user.'
                                    currentBuild.result = 'ABORTED'
                                    emailext (
                                        subject: "Approval Denied: Recreate Terraform Infrastructure",
                                        body: "The stage to recreate Terraform infrastructure has been denied and will not be executed.",
                                        mimeType: 'text/html',
                                        to: "${env.ADMIN_EMAIL}"
                                    )
                                    error('User chose not to recreate infrastructure.')
                                }
                            } else {
                                echo 'No existing resources found. Applying Terraform.'
                                sh """
                                terraform init
                                terraform apply --auto-approve ${TERRAFORM_EXTRA_ARGS}
                                """
                            }
                        }
                    } else {
                        echo 'Aborted by user.'
                        currentBuild.result = 'ABORTED'
                        emailext (
                            subject: "Approval Denied: Terraform Apply",
                            body: "The stage to apply Terraform has been denied and will not be executed.",
                            mimeType: 'text/html',
                            to: "${env.ADMIN_EMAIL}"
                        )
                        error('User aborted the stage.')
                    }
                }
            }
        }
        stage('Request Approval for Terraform Destroy') {
            when {
                expression {
                    return terraform == 'destroy'
                }
            }
            steps {
                script {
                    emailext (
                        subject: "Approval Needed: Terraform Destroy",
                        body: """
                            <p>Please approve the execution of the Terraform Destroy stage.</p>
                            <p>Click <a href="${env.BUILD_URL}">here</a> to view the build details and provide approval.</p>
                        """,
                        mimeType: 'text/html',
                        to: "${env.ADMIN_EMAIL}"
                    )
                    echo 'Approval email sent. Awaiting manual approval...'
                }
            }
        }
        stage('terraform_destroy') {
            when {
                expression {
                    return terraform == 'destroy'
                }
            }
            steps {
                script {
                    def userInput = input(
                        id: 'userInput', message: 'Approve Terraform Destroy?', parameters: [
                            [$class: 'BooleanParameterDefinition', defaultValue: true, description: 'Approve to proceed?', name: 'Proceed']
                        ]
                    )
                    if (userInput) {
                        dir("./adq-ubuntudesktop/terraform/environments/${ENV}") {
                            input message: 'Are you sure you want to destroy the infrastructure?', ok: 'Yes'
                            sh """
                            terraform init
                            terraform destroy --auto-approve ${TERRAFORM_EXTRA_ARGS}
                            """
                        }
                    } else {
                        echo 'Aborted by user.'
                        currentBuild.result = 'ABORTED'
                        emailext (
                            subject: "Approval Denied: Terraform Destroy",
                            body: "The stage to destroy Terraform has been denied and will not be executed.",
                            mimeType: 'text/html',
                            to: "${env.ADMIN_EMAIL}"
                        )
                        error('User aborted the stage.')
                    }
                }
            }
        }
        stage('Request Approval for Ansible Apply') {
            when {
                expression {
                    return ANSIBLE == 'apply'
                }
            }
            steps {
                script {
                    emailext (
                        subject: "Approval Needed: Ansible Apply",
                        body: """
                            <p>Please approve the execution of the Ansible Apply stage.</p>
                            <p>Click <a href="${env.BUILD_URL}">here</a> to view the build details and provide approval.</p>
                        """,
                        mimeType: 'text/html',
                        to: "${env.ADMIN_EMAIL}"
                    )
                    echo 'Approval email sent. Awaiting manual approval...'
                }
            }
        }
        stage('Playbook_apply') {
            when {
                expression {
                    return ANSIBLE == 'apply'
                }
            }
            steps {
                script {
                    def userInput = input(
                        id: 'userInput', message: 'Approve Ansible Apply?', parameters: [
                            [$class: 'BooleanParameterDefinition', defaultValue: true, description: 'Approve to proceed?', name: 'Proceed']
                        ]
                    )
                    if (userInput) {
                        try {
                            dir("./adq-ubuntudesktop/ansible/") {
                                sh """
                                ansible --version
                                ansible-inventory --graph -i environments/$ENV
                                ansible-playbook -i environments/$ENV main.yaml "${ANSIBLE_EXTRA_ARGS}"
                                """
                            }
                            echo 'Playbook executed successfully.'
                            emailext (
                                subject: "Approval Granted: Ansible Apply",
                                body: "The stage to apply Ansible has been approved and executed.",
                                mimeType: 'text/html',
                                to: "${env.ADMIN_EMAIL}"
                            )
                        } catch (Exception e) {
                            echo 'Playbook execution failed.'
                            currentBuild.result = 'FAILURE'
                            emailext (
                                subject: "Execution Failed: Ansible Apply",
                                body: "The stage to apply Ansible has failed.",
                                mimeType: 'text/html',
                                to: "${env.ADMIN_EMAIL}"
                            )
                        }
                    } else {
                        echo 'Aborted by user.'
                        currentBuild.result = 'ABORTED'
                        emailext (
                            subject: "Approval Denied: Ansible Apply",
                            body: "The stage to apply Ansible has been denied and will not be executed.",
                            mimeType: 'text/html',
                            to: "${env.ADMIN_EMAIL}"
                        )
                        error('User aborted the stage.')
                    }
                }
            }
        }
        stage('Playbook_destroy') {
            when {
                expression {
                    return ANSIBLE == 'destroy'
                }
            }
            steps {
                script {
                    try {
                        dir("./adq-ubuntudesktop/ansible/") {
                            sh """
                            ansible-playbook -i environments/$ENV main.yaml "${ANSIBLE_EXTRA_ARGS}"
                            """
                        }
                        echo 'Playbook executed successfully in destroy stage.'
                    } catch (Exception e) {
                        echo 'Playbook execution failed in destroy stage.'
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
    }
}
